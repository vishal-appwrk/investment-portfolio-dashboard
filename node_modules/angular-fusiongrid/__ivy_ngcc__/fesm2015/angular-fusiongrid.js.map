{"version":3,"file":"angular-fusiongrid.js","sources":["../../../projects/fusion-grid/src/lib/fusion-grid.service.ts","../../../projects/fusion-grid/src/lib/events.ts","../../../projects/fusion-grid/src/lib/fusion-grid.component.ts","../../../projects/fusion-grid/src/lib/fusion-grid.module.ts","../../../projects/fusion-grid/src/public-api.ts","../../../projects/fusion-grid/src/angular-fusiongrid.ts"],"names":["Events"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FusionGridService {\n\n  static _fgRoot: any = null;\n\n  fusionGrid: any;\n\n  static setFgRoot (fusionGrid: any) {\n    FusionGridService._fgRoot = fusionGrid;\n  }\n\n  static getFgRoot(): any {\n    return FusionGridService._fgRoot;\n  }\n  \n  static isFgRootSet() :boolean {\n    return !!FusionGridService._fgRoot;\n  }\n  constructor() { \n\n    if(!FusionGridService.isFgRootSet()) {\n      throw Error('Please Configure the fusion Grid');\n    }\n    this.fusionGrid = FusionGridService.getFgRoot();\n  }\n}\n","const events = [\n    'initialized',\n    'beforeRender',\n    'rendered',\n    'updated',\n    'resized',\n    'disposed',\n    'rowHovered',\n    'columnHovered',\n    'rowDoubleClicked',\n    'headerClicked',\n    'cardClicked',\n    'cardDoubleClicked', \n    'recordClicked', \n    'recordDoubleClicked'\n];\n\nexport default events;","import { Component, ElementRef, ViewChild, Input, Output, AfterViewInit, OnDestroy, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FusionGridService } from './fusion-grid.service';\nimport Events from './events';\nimport { GridEvent, GridInitialized } from './fusion-grid.interface';\n\n@Component({\n  selector: 'fusion-grid',\n  template: `<div #gridContainer style=\"width:100%;height:100%\"></div>`,\n  styles:['.fusion-grid-container{ display: block; }'],\n  host:{\n    'class':'fusion-grid-container'\n  },\n  encapsulation:ViewEncapsulation.None\n})\nexport class FusionGridComponent implements AfterViewInit, OnDestroy {\n\n  private gridEvents: string[] = Events;\n  private eventMapper: {[key:string]:string} = {};\n  private gridRef: any;\n\n  constructor(private fusionGridService: FusionGridService) {}\n\n  _gridConfig: any;\n  @Input() \n  set gridConfig(config: any) {\n    this.updateGridConfig(config);\n    this._gridConfig = config;\n  }\n  get gridConfig(): any {\n    return this._gridConfig;\n  }\n\n  _dataTable: any;\n  @Input() \n  set dataTable(dataTable: any){\n    this.updateDataTable(dataTable);\n    this._dataTable = dataTable;\n  }\n\n  get dataTable(): any {\n    return this._dataTable;\n  }\n\n  @ViewChild('gridContainer') gridContainer: ElementRef;\n\n  // Events\n  @Output() initialized = new EventEmitter<GridInitialized>();\n\n  @Output() beforeRender = new EventEmitter<GridEvent>();\n\n  @Output() rendered = new EventEmitter<GridEvent>();\n\n  @Output() updated = new EventEmitter<GridEvent>();\n\n  @Output() resized = new EventEmitter<GridEvent>();\n\n  @Output() disposed = new EventEmitter<GridEvent>();\n\n  @Output() rowHovered = new EventEmitter<GridEvent>();\n\n  @Output() columnHovered = new EventEmitter<GridEvent>();\n\n  @Output() rowDoubleClicked = new EventEmitter<GridEvent>();\n\n  @Output() headerClicked = new EventEmitter<GridEvent>();\n\n  @Output() cardClicked = new EventEmitter<GridEvent>();\n\n  @Output() cardDoubleClicked = new EventEmitter<GridEvent>();\n\n  @Output() recordClicked = new EventEmitter<GridEvent>();\n\n  @Output() recordDoubleClicked = new EventEmitter<GridEvent>();\n  \n  \n  ngAfterViewInit() {\n    const grid = this.fusionGridService.fusionGrid;\n    this.gridRef = new grid(this.gridContainer.nativeElement, this.dataTable, this.gridConfig);\n    this.initialized.emit({grid: this.gridRef});\n    this.addGridEvents();\n    this.gridRef.render();\n  }\n\n  ngOnDestroy() {\n    if(!this.gridRef.dispose) {\n      this.gridContainer.nativeElement.remove();\n      return;\n    }\n\n    this.gridRef.dispose();\n  }\n\n  /** Attch the Events dynamically if its available in the component component */\n  private addGridEvents(): void {\n    this.gridEvents.forEach((eventName: string)=> {\n      const eventSource = this[eventName] as EventEmitter<any>;\n      this.eventMapper[eventName.toLocaleLowerCase()] = eventName;\n      //Check Weather the event is subscribed\n      if(eventSource.observers.length) {\n        const callbackFn = (event: any, data: any) => {\n          this[this.eventMapper[event.type]].emit({event, data});\n        }\n        this.gridRef.on(eventName, callbackFn);\n      }\n    });\n  }\n /** Call the specific setter method once we update the config reference */\n  updateGridConfig(config: any): void {\n    if(!this.gridRef){\n      return;\n    }\n\n    Object.entries(config).forEach(([key,value])=>{\n      if(this.gridConfig[key] !== config[key]){\n        const setterMethod = `set${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n        this.gridRef[setterMethod] && this.gridRef[setterMethod](value);\n      }\n    });\n  }\n\n  updateDataTable(dataTable: any): void {\n    if(!this.gridRef){\n      return;\n    }\n    this.gridRef.setDataTable(dataTable);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FusionGridComponent } from './fusion-grid.component';\nimport { FusionGridService } from './fusion-grid.service';\n\n\n@NgModule({\n  declarations: [\n    FusionGridComponent,\n  ],\n\n  providers:[FusionGridService],\n\n  imports: [\n  ],\n  exports: [\n    FusionGridComponent\n  ]\n})\nexport class FusionGridModule {\n  static setFGRoot(fusionGrid: any) {\n    FusionGridService.setFgRoot(fusionGrid);\n  }\n}\n","/*\n * Public API Surface of fusion-grid\n */\n\nexport * from './lib/fusion-grid.service';\nexport * from './lib/fusion-grid.component';\nexport * from './lib/fusion-grid.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}