{"version":3,"file":"fusion-grid.component.d.ts","sources":["fusion-grid.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { FusionGridService } from './fusion-grid.service';\nimport { GridEvent, GridInitialized } from './fusion-grid.interface';\nexport declare class FusionGridComponent implements AfterViewInit, OnDestroy {\n    private fusionGridService;\n    private gridEvents;\n    private eventMapper;\n    private gridRef;\n    constructor(fusionGridService: FusionGridService);\n    _gridConfig: any;\n    set gridConfig(config: any);\n    get gridConfig(): any;\n    _dataTable: any;\n    set dataTable(dataTable: any);\n    get dataTable(): any;\n    gridContainer: ElementRef;\n    initialized: EventEmitter<GridInitialized>;\n    beforeRender: EventEmitter<GridEvent>;\n    rendered: EventEmitter<GridEvent>;\n    updated: EventEmitter<GridEvent>;\n    resized: EventEmitter<GridEvent>;\n    disposed: EventEmitter<GridEvent>;\n    rowHovered: EventEmitter<GridEvent>;\n    columnHovered: EventEmitter<GridEvent>;\n    rowDoubleClicked: EventEmitter<GridEvent>;\n    headerClicked: EventEmitter<GridEvent>;\n    cardClicked: EventEmitter<GridEvent>;\n    cardDoubleClicked: EventEmitter<GridEvent>;\n    recordClicked: EventEmitter<GridEvent>;\n    recordDoubleClicked: EventEmitter<GridEvent>;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Attch the Events dynamically if its available in the component component */\n    private addGridEvents;\n    /** Call the specific setter method once we update the config reference */\n    updateGridConfig(config: any): void;\n    updateDataTable(dataTable: any): void;\n}\n"]}