import { ElementRef, AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';
import { FusionGridService } from './fusion-grid.service';
import { GridEvent, GridInitialized } from './fusion-grid.interface';
export declare class FusionGridComponent implements AfterViewInit, OnDestroy {
    private fusionGridService;
    private gridEvents;
    private eventMapper;
    private gridRef;
    constructor(fusionGridService: FusionGridService);
    _gridConfig: any;
    set gridConfig(config: any);
    get gridConfig(): any;
    _dataTable: any;
    set dataTable(dataTable: any);
    get dataTable(): any;
    gridContainer: ElementRef;
    initialized: EventEmitter<GridInitialized>;
    beforeRender: EventEmitter<GridEvent>;
    rendered: EventEmitter<GridEvent>;
    updated: EventEmitter<GridEvent>;
    resized: EventEmitter<GridEvent>;
    disposed: EventEmitter<GridEvent>;
    rowHovered: EventEmitter<GridEvent>;
    columnHovered: EventEmitter<GridEvent>;
    rowDoubleClicked: EventEmitter<GridEvent>;
    headerClicked: EventEmitter<GridEvent>;
    cardClicked: EventEmitter<GridEvent>;
    cardDoubleClicked: EventEmitter<GridEvent>;
    recordClicked: EventEmitter<GridEvent>;
    recordDoubleClicked: EventEmitter<GridEvent>;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /** Attch the Events dynamically if its available in the component component */
    private addGridEvents;
    /** Call the specific setter method once we update the config reference */
    updateGridConfig(config: any): void;
    updateDataTable(dataTable: any): void;
}
