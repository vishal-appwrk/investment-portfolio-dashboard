import { Component, ViewChild, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { FusionGridService } from './fusion-grid.service';
import Events from './events';
export class FusionGridComponent {
    constructor(fusionGridService) {
        this.fusionGridService = fusionGridService;
        this.gridEvents = Events;
        this.eventMapper = {};
        // Events
        this.initialized = new EventEmitter();
        this.beforeRender = new EventEmitter();
        this.rendered = new EventEmitter();
        this.updated = new EventEmitter();
        this.resized = new EventEmitter();
        this.disposed = new EventEmitter();
        this.rowHovered = new EventEmitter();
        this.columnHovered = new EventEmitter();
        this.rowDoubleClicked = new EventEmitter();
        this.headerClicked = new EventEmitter();
        this.cardClicked = new EventEmitter();
        this.cardDoubleClicked = new EventEmitter();
        this.recordClicked = new EventEmitter();
        this.recordDoubleClicked = new EventEmitter();
    }
    set gridConfig(config) {
        this.updateGridConfig(config);
        this._gridConfig = config;
    }
    get gridConfig() {
        return this._gridConfig;
    }
    set dataTable(dataTable) {
        this.updateDataTable(dataTable);
        this._dataTable = dataTable;
    }
    get dataTable() {
        return this._dataTable;
    }
    ngAfterViewInit() {
        const grid = this.fusionGridService.fusionGrid;
        this.gridRef = new grid(this.gridContainer.nativeElement, this.dataTable, this.gridConfig);
        this.initialized.emit({ grid: this.gridRef });
        this.addGridEvents();
        this.gridRef.render();
    }
    ngOnDestroy() {
        if (!this.gridRef.dispose) {
            this.gridContainer.nativeElement.remove();
            return;
        }
        this.gridRef.dispose();
    }
    /** Attch the Events dynamically if its available in the component component */
    addGridEvents() {
        this.gridEvents.forEach((eventName) => {
            const eventSource = this[eventName];
            this.eventMapper[eventName.toLocaleLowerCase()] = eventName;
            //Check Weather the event is subscribed
            if (eventSource.observers.length) {
                const callbackFn = (event, data) => {
                    this[this.eventMapper[event.type]].emit({ event, data });
                };
                this.gridRef.on(eventName, callbackFn);
            }
        });
    }
    /** Call the specific setter method once we update the config reference */
    updateGridConfig(config) {
        if (!this.gridRef) {
            return;
        }
        Object.entries(config).forEach(([key, value]) => {
            if (this.gridConfig[key] !== config[key]) {
                const setterMethod = `set${key.charAt(0).toUpperCase()}${key.slice(1)}`;
                this.gridRef[setterMethod] && this.gridRef[setterMethod](value);
            }
        });
    }
    updateDataTable(dataTable) {
        if (!this.gridRef) {
            return;
        }
        this.gridRef.setDataTable(dataTable);
    }
}
FusionGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'fusion-grid',
                template: `<div #gridContainer style="width:100%;height:100%"></div>`,
                host: {
                    'class': 'fusion-grid-container'
                },
                encapsulation: ViewEncapsulation.None,
                styles: ['.fusion-grid-container{ display: block; }']
            },] }
];
FusionGridComponent.ctorParameters = () => [
    { type: FusionGridService }
];
FusionGridComponent.propDecorators = {
    gridConfig: [{ type: Input }],
    dataTable: [{ type: Input }],
    gridContainer: [{ type: ViewChild, args: ['gridContainer',] }],
    initialized: [{ type: Output }],
    beforeRender: [{ type: Output }],
    rendered: [{ type: Output }],
    updated: [{ type: Output }],
    resized: [{ type: Output }],
    disposed: [{ type: Output }],
    rowHovered: [{ type: Output }],
    columnHovered: [{ type: Output }],
    rowDoubleClicked: [{ type: Output }],
    headerClicked: [{ type: Output }],
    cardClicked: [{ type: Output }],
    cardDoubleClicked: [{ type: Output }],
    recordClicked: [{ type: Output }],
    recordDoubleClicked: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,