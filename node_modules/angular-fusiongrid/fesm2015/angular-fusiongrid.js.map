{"version":3,"file":"angular-fusiongrid.js","sources":["../../../projects/fusion-grid/src/lib/fusion-grid.service.ts","../../../projects/fusion-grid/src/lib/events.ts","../../../projects/fusion-grid/src/lib/fusion-grid.component.ts","../../../projects/fusion-grid/src/lib/fusion-grid.module.ts","../../../projects/fusion-grid/src/public-api.ts","../../../projects/fusion-grid/src/angular-fusiongrid.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FusionGridService {\n\n  static _fgRoot: any = null;\n\n  fusionGrid: any;\n\n  static setFgRoot (fusionGrid: any) {\n    FusionGridService._fgRoot = fusionGrid;\n  }\n\n  static getFgRoot(): any {\n    return FusionGridService._fgRoot;\n  }\n  \n  static isFgRootSet() :boolean {\n    return !!FusionGridService._fgRoot;\n  }\n  constructor() { \n\n    if(!FusionGridService.isFgRootSet()) {\n      throw Error('Please Configure the fusion Grid');\n    }\n    this.fusionGrid = FusionGridService.getFgRoot();\n  }\n}\n","const events = [\n    'initialized',\n    'beforeRender',\n    'rendered',\n    'updated',\n    'resized',\n    'disposed',\n    'rowHovered',\n    'columnHovered',\n    'rowDoubleClicked',\n    'headerClicked',\n    'cardClicked',\n    'cardDoubleClicked', \n    'recordClicked', \n    'recordDoubleClicked'\n];\n\nexport default events;","import { Component, ElementRef, ViewChild, Input, Output, AfterViewInit, OnDestroy, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FusionGridService } from './fusion-grid.service';\nimport Events from './events';\nimport { GridEvent, GridInitialized } from './fusion-grid.interface';\n\n@Component({\n  selector: 'fusion-grid',\n  template: `<div #gridContainer style=\"width:100%;height:100%\"></div>`,\n  styles:['.fusion-grid-container{ display: block; }'],\n  host:{\n    'class':'fusion-grid-container'\n  },\n  encapsulation:ViewEncapsulation.None\n})\nexport class FusionGridComponent implements AfterViewInit, OnDestroy {\n\n  private gridEvents: string[] = Events;\n  private eventMapper: {[key:string]:string} = {};\n  private gridRef: any;\n\n  constructor(private fusionGridService: FusionGridService) {}\n\n  _gridConfig: any;\n  @Input() \n  set gridConfig(config: any) {\n    this.updateGridConfig(config);\n    this._gridConfig = config;\n  }\n  get gridConfig(): any {\n    return this._gridConfig;\n  }\n\n  _dataTable: any;\n  @Input() \n  set dataTable(dataTable: any){\n    this.updateDataTable(dataTable);\n    this._dataTable = dataTable;\n  }\n\n  get dataTable(): any {\n    return this._dataTable;\n  }\n\n  @ViewChild('gridContainer') gridContainer: ElementRef;\n\n  // Events\n  @Output() initialized = new EventEmitter<GridInitialized>();\n\n  @Output() beforeRender = new EventEmitter<GridEvent>();\n\n  @Output() rendered = new EventEmitter<GridEvent>();\n\n  @Output() updated = new EventEmitter<GridEvent>();\n\n  @Output() resized = new EventEmitter<GridEvent>();\n\n  @Output() disposed = new EventEmitter<GridEvent>();\n\n  @Output() rowHovered = new EventEmitter<GridEvent>();\n\n  @Output() columnHovered = new EventEmitter<GridEvent>();\n\n  @Output() rowDoubleClicked = new EventEmitter<GridEvent>();\n\n  @Output() headerClicked = new EventEmitter<GridEvent>();\n\n  @Output() cardClicked = new EventEmitter<GridEvent>();\n\n  @Output() cardDoubleClicked = new EventEmitter<GridEvent>();\n\n  @Output() recordClicked = new EventEmitter<GridEvent>();\n\n  @Output() recordDoubleClicked = new EventEmitter<GridEvent>();\n  \n  \n  ngAfterViewInit() {\n    const grid = this.fusionGridService.fusionGrid;\n    this.gridRef = new grid(this.gridContainer.nativeElement, this.dataTable, this.gridConfig);\n    this.initialized.emit({grid: this.gridRef});\n    this.addGridEvents();\n    this.gridRef.render();\n  }\n\n  ngOnDestroy() {\n    if(!this.gridRef.dispose) {\n      this.gridContainer.nativeElement.remove();\n      return;\n    }\n\n    this.gridRef.dispose();\n  }\n\n  /** Attch the Events dynamically if its available in the component component */\n  private addGridEvents(): void {\n    this.gridEvents.forEach((eventName: string)=> {\n      const eventSource = this[eventName] as EventEmitter<any>;\n      this.eventMapper[eventName.toLocaleLowerCase()] = eventName;\n      //Check Weather the event is subscribed\n      if(eventSource.observers.length) {\n        const callbackFn = (event: any, data: any) => {\n          this[this.eventMapper[event.type]].emit({event, data});\n        }\n        this.gridRef.on(eventName, callbackFn);\n      }\n    });\n  }\n /** Call the specific setter method once we update the config reference */\n  updateGridConfig(config: any): void {\n    if(!this.gridRef){\n      return;\n    }\n\n    Object.entries(config).forEach(([key,value])=>{\n      if(this.gridConfig[key] !== config[key]){\n        const setterMethod = `set${key.charAt(0).toUpperCase()}${key.slice(1)}`;\n        this.gridRef[setterMethod] && this.gridRef[setterMethod](value);\n      }\n    });\n  }\n\n  updateDataTable(dataTable: any): void {\n    if(!this.gridRef){\n      return;\n    }\n    this.gridRef.setDataTable(dataTable);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FusionGridComponent } from './fusion-grid.component';\nimport { FusionGridService } from './fusion-grid.service';\n\n\n@NgModule({\n  declarations: [\n    FusionGridComponent,\n  ],\n\n  providers:[FusionGridService],\n\n  imports: [\n  ],\n  exports: [\n    FusionGridComponent\n  ]\n})\nexport class FusionGridModule {\n  static setFGRoot(fusionGrid: any) {\n    FusionGridService.setFgRoot(fusionGrid);\n  }\n}\n","/*\n * Public API Surface of fusion-grid\n */\n\nexport * from './lib/fusion-grid.service';\nexport * from './lib/fusion-grid.component';\nexport * from './lib/fusion-grid.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Events"],"mappings":"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"}